Preprint. Under review.
LLM queries since the Evaluator additionally calls the VerifierLLM. The FEA runtime is
only a small fraction of this time: parsing the LLM reply, evaluating it by executing it in
COMSOL Multiphysics®and retrieving API messages took around 0.9-1.5s for a single LLM
reply. We used a subset of 5 problems to compute these estimates.
E.1
Tools
In our implementation of the ToolLookupAgent, if the tool call fails, the ToolLookupAgent
will return an empty reply. Tool calls fail when the LLM is unable to generate a call that is
formatted in the way Langfun expects.
E.1.1
QueryModelTreeProperties
In order to help the LLM learn how to appropriately format a valid path, say to the ‘Solid’
feature, the current state of the model tree is shown to the ToolLookupAgent LLM. It also
has a history of unsuccessful (incorrectly formatted) paths in previous queries to this tool,
in order to minimize the chances of incorrectly calling this tool with an invalid path.
E.1.2
RetrieveAnnotatedSnippets
We use the Discovery Engine API (AI) with the model name ‘semantic-ranker-512-003’ to
rank and retrieve the top 3 annotations most similar to the query snippet. The annotation
library was generated by taking tutorials and splitting them into code blocks using the
patterns described in D.2. There are 768 pairs of annotations and snippets across all branches
of code. Here is an example of an annotation ‘summary’ and its snippet:
Summary: Defining a transient study with a time range from 0 to 0.025 seconds with a step
of 1 second. The study will solve for the ”spf” physics interface, and a relative tolerance of
0.001 will be used. The number of solver iterations will be automatically determined based
on the time step.
Code:
model.study().create ("std1");
model.study("std1").create ("time", "Transient ");
model.study("std1").feature ("time").setSolveFor ("/ physics/spf", true);
model.study("std1").feature ("time").set(" tlist", "range (0 ,0.025 ,1)");
...
model.study("std1").feature ("time").set(" solnum", "auto");
E.2
Analysis
Figure 6: Block-wise executability across the 300 initial samples of code (purple) with
PhyDoc In-Context and in the best solution (green) across all problems. Error bars denote
standard deviations.
26
