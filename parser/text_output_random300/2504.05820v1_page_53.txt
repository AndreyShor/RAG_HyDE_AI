Tools and methodology
39
Yadism has a uniform treatment of all heavy quarks, i.e., all features that are available for charm
are also available for bottom and top. This strategy opens up the possibility for computations
with an intrinsic bottom quark [128, 129]. We provide both the fixed-flavor number scheme
(FFNSnf) and zero-mass variable-flavor number scheme (ZM-VFNS) calculation, as well as the
asymptotic limit, Q2 â‰«m2, of the FFNS (FFNSn(0)
f ), which is required in the construction of
the FONLL scheme [107].
The PineAPPL grid output format allows Yadism to be integrated into the xFitter frame-
work [130, 131, 132] and the Pineline framework (see Section 2.1.3).
Yadism is written in the Python programming language, which is known f or its ease of use,
and thus reduces the threshold for potential new contributors. For these reasons, development
of new functionality can be quick to, e.g., rapidly adopt new computations.
The up-to-date code documentation is available at:
https://yadism.readthedocs.io/en/latest/.
Benchmarks to other available libraries, as APFEL++ and Qcdnum, have been performed, both
at coefficient function and structure function level, finding good agreement as shown in [7,
Sec. 3.1].
If one wishes to actually compute a structure function one needs to define a number of theory
parameters and parameters of the experimental setup. Such input settings are passed to Yadism
through runcards in YAML format, 3 and they are divided into two parts: an observable runcard
describing the experimental setup (such as scattering particles, kinematic bins, or helicity
settings) and a theory runcard describing the parameters of the theory framework (such as
coupling strength, perturbative orders, or quark masses). While observable runcards are usually
tailored to a given experiment, theory parameters are usually shared by multiple runs. Below,
we describe the most important options for the configuration of the observables and theories
that can be defined in the respective runcard. We conclude analyzing differences between flavor
schemes.
Observable configuration options
Projectile.
Yadism supports computations of DIS coefficients with massless charged leptons
and their associated neutrinos as projectiles in the scattering process. Specifically, to describe,
e.g., the HERA [133, 134] data one needs both electrons and positrons and, e.g., for the
CHORUS [135] data neutrinos as well as anti-neutrinos are needed. Charged leptons can
interact both electromagnetically and weakly with the scattered nuclei, whereas neutrinos only
carry weak charges. Recently, together with a machine-learning parametrization of experimental
data, CC neutrino DIS predictions computed with Yadism have been used to extend predictions
for neutrino structure functions [15].
3https://yaml.org/
