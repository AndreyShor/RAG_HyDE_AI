Figure 1: General scheme of the modified version. First, we define the quantum circuit qc with N qubit
input and then add the required gates to it. In the qc.run section, the gates are applied to the system
state vector in order and finally qc.measure performs the measurement. The visualizer class is also used
to draw the circuit.
Figure 2: General scheme of AriaQuanta
the general architecture, a quantum circuit or algorithm is first defined, similar to the previous section.
It is then sent to a compiler that integrates a backend and task management and after executing the
program, the results are obtained. It is important to note that the program can be executed using a
CPU, QPU, or HPC. The results include the state vector, density matrix, and probability distribution of
states. Each part will be explained in detail in the following sections.
3
Overview of AriaQuanta
In this section, we provide a detailed overview of AriaQuantaâ€™s functionalities, including the simulation
of quantum circuits, as well as handling their noisy counterparts.
3.1
Qubit initialization
To implement a quantum circuit, we first need to define the qubits. AriaQuanta offers two types of qubits:
single-qubit and multi-qubit. Both types include the initial state vector. The single-qubit class creates
a qubit object, which is then used to define a multi-qubit class. The multi-qubit class contains 5 qubits
3
